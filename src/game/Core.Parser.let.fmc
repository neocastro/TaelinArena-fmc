Core.Parser.let: Parser(Core.Ctx -> Core)
  let C = Core.Ctx -> Core
  Parser.then<String><C>(Core.Parser.symbol("let"))   |
  Parser.bind<String><C>(Core.Parser.nam(Bool.false)) | (name)
  Parser.then<Unit  ><C>(Core.Parser.space)           |
  Parser.then<String><C>(Core.Parser.symbol("="))     |
  Parser.bind<C     ><C>(Core.Parser.trm)             | (expr)
  Parser.then<Unit  ><C>(Core.Parser.space)           |
  Parser.then<Maybe(String)><C>
  | Parser.optional<String>(Core.Parser.symbol(";")); |
  Parser.bind<C     ><C>(Core.Parser.trm)             | (body)
  Parser.pure<C>
  | (ctx)
    let tbody = ((x) body(Core.Ctx.ext(name)(x)(ctx))) :: Core -> Core
    Core.let(name)(expr(ctx))(tbody);;;;;;;;;
